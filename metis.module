<?php

/**
 * @file
 * The metis module
 *
 * Allows you to add the VG Wort metis pixel to nodes
 */

/**
 * Implements hook_permission().
 */
function metis_permission() {

  return array(
    'administer metis module' => array(
      'title' => t('Administer Metis module'),
    ),
    'add metis codes to nodes' => array(
      'title' => t('Add Metis codes to nodes'),
    ),
    'import metis codes' => array(
      'title' => t('Import Metis codes'),
    ),
  );

}


/**
 * Implements hook_menu().
 */
function metis_menu() {

  $items = array();

  $items['admin/config/search/metis'] = array(
    'title' => 'Metis',
    'description' => 'Metis settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_settings_form'),
    'access arguments' => array('administer metis module'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Set default for tabs.
  $items['admin/config/search/metis/settings'] = array(
    'title' => 'Metis settings',
    'access arguments' => array('administer metis module'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/search/metis/codes'] = array(
    'title' => 'Import Metis codes',
    'description' => 'Import <abbr title="Comma Separated Values">CSV</abbr> file with metis codes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_codes_csv_form'),
    'access arguments' => array('add site-wide metis codes'),
    'type' => MENU_LOCAL_TASK,
  );

  // Set default for tabs.
  $items['admin/config/search/metis/codes/import'] = array(
    'title' => 'Import Metis codes from CSV',
    'access arguments' => array('add site-wide metis codes'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/search/metis/codes/paste'] = array(
    'title' => 'Paste Metis codes',
    'description' => 'Add metis codes by pasting them to a form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_codes_form'),
    'access arguments' => array('add site-wide metis codes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );

  if (module_exists('views')) {

    // Get metis field name(s).
    $fields = field_info_fields();
    $metis_fields = array();

    foreach ($fields as $key => $field) {
      if ($field['type'] == 'metis') {
        $metis_fields[] = $key;
      }
    }

    // Create a default menu entry for the first field.
    if (count($metis_fields) > 0) {
      $items['admin/config/search/metis/list'] = array(
        'title' => 'List codes',
        'description' => 'List used metis codes',
        'page callback' => 'views_page',
        'page arguments' => array('metis_' . $metis_fields[0], 'default'),
        'access arguments' => array('administer metis module'),
        'type' => MENU_LOCAL_TASK,
      );
    }

    // If there are more Metis fields, add them as sub tabs.
    if (count($metis_fields) > 1) {
      // Set default for tabs (first field).
      $items['admin/config/search/metis/list/' . $metis_fields[0]] = array(
        'title' => 'Field ' . $metis_fields[0],
        'access arguments' => array('administer metis module'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );

      // Unset first field because it is already included.
      unset($metis_fields[0]);

      // Create a menu entry for every metis field.
      foreach ($metis_fields as $field) {
        $items['admin/config/search/metis/list/' . $field] = array(
          'title' => 'Field ' . $field,
          'description' => 'List used metis codes for field ' . $field,
          'page callback' => 'views_page',
          'page arguments' => array('metis_' . $field, 'default'),
          'access arguments' => array('administer metis module'),
          'type' => MENU_LOCAL_TASK,
        );
      }
    }
  }

  return $items;
}


/**
 * Implements hook_help().
 */
function metis_help($path, $arg) {

  switch ($path) {

    // Main module help.
    case 'admin/config/search/metis':
      return '<p>' . t('The Metis module allows you to automatically insert the metis pixel provided by <a href="http://www.vgwort.de/">VG Wort</a>. To use the module you need to add a Metis field to your content types.') . '</p>';

    case 'admin/help#metis':
      // Return a line-break version of the module README.txt.
      return check_markup(file_get_contents( dirname(__FILE__) . "/README.txt") );
  }
}


/**
 * Define the settings form.
 */
function metis_settings_form($form, &$form_state) {

  // Get metis field name(s).
  $fields = field_info_fields();
  $metis_fields = 0;

  foreach ($fields as $field) {
    if ($field['type'] == 'metis') {
      $metis_fields++;
    }
  }

  // Display warning if no Metis field is configured.
  if ($metis_fields == 0) {
    drupal_set_message(t('There is no Metis field configured. Please add a field of the type <em>Metis</em> to at least one content type to make this module work.'), 'error');
  }

  // Display warning if no unused codes left.
  if (metis_count_unused() == 0) {
    drupal_set_message(t('There are no unused codes left. Please add some.'), 'error');
  }

  // Define a select list.
  $form['metis_default_server'] = array(
    '#type' => 'select',
    '#title' => t('Default Metis server'),
    '#description' => t('Please select the default Metis server to be used when uploading codes. If your website is registered with VG Wort as an editorial, you will be assigned a server that you should use permanently.'),
    '#default_value' => variable_get('metis_default_server', NULL),
    '#options' => array(
      NULL => t('Please select'),
      'vg01.met.vgwort.de' => 'vg01.met.vgwort.de',
      'vg02.met.vgwort.de' => 'vg02.met.vgwort.de',
      'vg03.met.vgwort.de' => 'vg03.met.vgwort.de',
      'vg04.met.vgwort.de' => 'vg04.met.vgwort.de',
      'vg05.met.vgwort.de' => 'vg05.met.vgwort.de',
      'vg06.met.vgwort.de' => 'vg06.met.vgwort.de',
      'vg07.met.vgwort.de' => 'vg07.met.vgwort.de',
      'vg08.met.vgwort.de' => 'vg08.met.vgwort.de',
      'vg09.met.vgwort.de' => 'vg09.met.vgwort.de',
    ),
    '#required' => FALSE,
  );

  // Define a selection for SSL.
  $form['metis_force_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SSL to include Metis codes'),
    '#description' => t('Activate this option if you wish to use a secure connection (SSL) to include Metis codes. In that case the server ssl-vg03.met.vgwort.de will be used.'),
    '#default_value' => variable_get('metis_force_ssl', NULL),
  );

  $form['status'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('<strong>Status:</strong> There are currently %count_codes unused codes left.', array('%count_codes' => metis_count_unused())) . '</p>',
    '#weight' => -3,
  );

  return system_settings_form($form);

}


/**
 * Define the form for entering a code.
 */
function metis_codes_form($form, &$form_state) {

  // Define a textarea.
  $form['code'] = array(
    '#type' => 'textarea',
    '#title' => t('Metis code'),
    '#description' => t('Please enter Metis codes you want to save in the format [public_code];[private_code]. <strong>One per line. Every code must be 32 letters long.</strong>'),
    '#cols' => 32,
    '#rows' => 20,
    '#required' => TRUE,
  );

  // Define a select list.
  $form['server'] = array(
    '#type' => 'select',
    '#title' => t('Metis Server'),
    '#description' => t('Please select a Metis server to be associated with the imported codes.'),
    '#default_value' => variable_get('metis_default_server', NULL),
    '#options' => array(
      NULL => t('Please select'),
      'vg01.met.vgwort.de' => 'vg01.met.vgwort.de',
      'vg02.met.vgwort.de' => 'vg02.met.vgwort.de',
      'vg03.met.vgwort.de' => 'vg03.met.vgwort.de',
      'vg04.met.vgwort.de' => 'vg04.met.vgwort.de',
      'vg05.met.vgwort.de' => 'vg05.met.vgwort.de',
      'vg06.met.vgwort.de' => 'vg06.met.vgwort.de',
      'vg07.met.vgwort.de' => 'vg07.met.vgwort.de',
      'vg08.met.vgwort.de' => 'vg08.met.vgwort.de',
      'vg09.met.vgwort.de' => 'vg09.met.vgwort.de',
    ),
    '#required' => TRUE,
  );

  // Define a submit function.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;

}


/**
 * Validate the input.
 */
function metis_codes_form_validate($form, &$form_state) {

  // Get rid of white spaces.
  $input = trim($form_state['values']['code']);

  // Split by line.
  $rows = explode("\n", $input);

  // Remove any extra \r characters left behind.
  $rows = array_filter($rows, 'trim');

  $codes = array();

  foreach ($rows as $row) {

    $items = explode(';', $row);

    // Prepare array for validation.
    $codes[] = array(
      'public' => check_plain(trim($items[0])),
      'private' => check_plain(trim($items[1])),
      'server' => $form_state['values']['server'],
    );

  }

  // Add validated codes to $form_state.
  $form_state['values']['validated'] = metis_code_validation($codes);

}


/**
 * Handle submission of metis codes.
 */
function metis_codes_form_submit($form, $form_state) {
  metis_code_submission($form_state['values']['validated']);
}


/**
 * Define the form for CSV import.
 */
function metis_codes_csv_form($form, &$form_state) {

  // Define file upload field.
  $form['file_csv'] = array(
    '#type' => 'file',
    '#title' => t('CSV file with Metis codes'),
    '#description' => t('Please upload the <abbr title="Comma Separated Values">CSV</abbr> file with metis codes.'),
  );

  // Define a select list.
  $form['server'] = array(
    '#type' => 'select',
    '#title' => t('Metis Server'),
    '#description' => t('Please select a Metis server to be associated with the imported codes.'),
    '#default_value' => variable_get('metis_default_server', NULL),
    '#options' => array(
      NULL => t('Please select'),
      'vg01.met.vgwort.de' => 'vg01.met.vgwort.de',
      'vg02.met.vgwort.de' => 'vg02.met.vgwort.de',
      'vg03.met.vgwort.de' => 'vg03.met.vgwort.de',
      'vg04.met.vgwort.de' => 'vg04.met.vgwort.de',
      'vg05.met.vgwort.de' => 'vg05.met.vgwort.de',
      'vg06.met.vgwort.de' => 'vg06.met.vgwort.de',
      'vg07.met.vgwort.de' => 'vg07.met.vgwort.de',
      'vg08.met.vgwort.de' => 'vg08.met.vgwort.de',
      'vg09.met.vgwort.de' => 'vg09.met.vgwort.de',
    ),
    '#required' => TRUE,
  );

  // Define a submit function.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  // Set the form encoding type.
  $form['#attributes']['enctype'] = "multipart/form-data";

  return $form;

}


/**
 * Validate the input.
 */
function metis_codes_csv_form_validate($form, &$form_state) {

  $codes = array();

  // Attempt to save the uploaded file.
  $file = file_save_upload('file_csv', array(
    'file_validate_extensions' => array('csv'),
    )
  );

  if ($file) {

    // Parse CSV file.
    ini_set('auto_detect_line_endings', TRUE);
    $handle = fopen(drupal_realpath($file->uri), "r");

    while ($row = fgetcsv($handle, 0, ';')) {

      $codes[] = array(
        'public' => trim($row[0]),
        'private' => trim($row[1]),
        'server' => $form_state['values']['server'],
      );

    }
  }

  // Add validated codes to $form_state.
  $form_state['values']['validated'] = metis_code_validation($codes);

}


/**
 * Handle submission of metis codes from CSV.
 */
function metis_codes_csv_form_submit($form, &$form_state) {
  metis_code_submission($form_state['values']['validated']);
}


/**
 * Validate submitted codes.
 *
 * @param array $codes
 *   An array of arrays containing the code values. Valid arguments are:
 *     - 'public' => string containing the 32 letter public metis code;
 *     - 'private' => string containing the 32 letter private metis code;
 *
 * @return array
 *   An array with the validated codes split up into arrays:
 *     - 'ignored' => codes to ignore.
 *     - 'public_length' => public metis codes longer than 32 characters.
 *     - 'private_length' => private metis codes longer than 32 characters.
 *     - 'code_exists' => codes that already exists in db.
 *     - 'valid' => codes that are valid.
 *     - 'error_validaton' => the $codes variable that led to an error.
 */
function metis_code_validation($codes) {

  $codes_validated = array();

  if (is_array($codes)) {

    // Patterns to be ignored.
    $patterns = array(
      'Öffentlicher',
      'Identifikationscode',
      'Privater',
      'VG Wort',
    );

    foreach ($codes as $code) {

      // Variable used to determine if code should be ignored.
      $ignore = FALSE;

      // Ignore codes that contain any of the above.
      foreach ($patterns as $pattern) {
        if (stripos($code['public'], $pattern) || stripos($code['private'], $pattern)) {
          // Save ignored codes in an array.
          $codes_validated['ignored'][] = $code;
          $ignore = TRUE;
          break;
        }
      }

      if (!$ignore) {

        // Check if code is already in db.
        $results = db_select('metis', 'm')
        ->fields('m')
        ->condition('code_public', $code['public'])
        ->countQuery()
        ->execute()
        ->fetchField();

        // Error if code is already in db.
        if ($results != 0) {
          $codes_validated['code_exists'][] = $code;
        }
        // Error if public metis code is too long.
        elseif (drupal_strlen($code['public']) != 32) {
          $codes_validated['public_length'][] = $code;
        }
        // Error if private metis code is too long.
        elseif ($code['private'] && drupal_strlen($code['private']) != 32) {
          $codes_validated['private_length'][] = $code;
        }
        // Error if server doesn't match.
        elseif (preg_match('#vg[0-9]{2}\.met\.vgwort\.de#', $code['server']) == 0) {
          $codes_validated['server'][] = $code;
        }
        // Valid code.
        else {
          $codes_validated['valid'][] = $code;
        }

      }

    }

  }
  else {
    $codes_validated['error_validaton'][] = $codes;
  }

  return $codes_validated;

}


/**
 * Submit codes.
 *
 * @param array $codes_validated
 *   An array of arrays containing the validated codes, valid arguments are:
 *     - 'public' => string containing the 32 letter public metis code;
 *     - 'private' => string containing the 32 letter private metis code;
 */
function metis_code_submission($codes_validated) {

  $count_submit = 0;
  $count_error = 0;

  // Make sure all keys exist to avoid errors.
  $keys = array_keys($codes_validated);
  $desired_keys = array('valid', 'ignored', 'public_length', 'private_length', 'server', 'code_exists', 'error_validaton');

  foreach ($desired_keys as $desired_key) {
    if (in_array($desired_key, $keys)) continue;  // Already set.
    $codes_validated[$desired_key] = NULL;
  }

  // Submit valid codes.
  if ($codes_validated['valid']) {
    foreach ($codes_validated['valid'] as $code) {
      try {
        db_insert('metis')
        ->fields(array(
          'code_public' => $code['public'],
          'code_private' => $code['private'],
          'server' => $code['server'],
        ))
        ->execute();
        // No exception thrown; PDO thinks the record was inserted correctly.
        $count_submit++;
      }
      catch (PDOException $e) {
        $count_error++;
      }
    }
  }

  // Status count.
  $count_ignored = count($codes_validated['ignored']);
  $count_public_length = count($codes_validated['public_length']);
  $count_private_length = count($codes_validated['private_length']);
  $count_server = count($codes_validated['server']);
  $count_code_exists = count($codes_validated['code_exists']);
  $count_error_validation = count($codes_validated['error_validaton']);

  // Set confirmation message.
  if ($count_submit > 0) {
    drupal_set_message(t('%count codes have been saved.', array('%count' => $count_submit)));
  }
  if ($count_ignored > 0) {
    drupal_set_message(t('%count line(s) have been ignored.', array('%count' => $count_ignored)), 'warning');
  }
  if ($count_public_length > 0) {
    drupal_set_message(t('%count codes have not been saved because the public metis code is not 32 letters long.', array('%count' => $count_public_length)), 'warning');
  }
  if ($count_private_length > 0) {
    drupal_set_message(t('%count codes have not been saved because the private metis code is not 32 letters long.', array('%count' => $count_private_length)), 'warning');
  }
  if ($count_server > 0) {
    drupal_set_message(t("%count codes have not been saved because the server wasn't valid.", array('%count' => $count_server)), 'warning');
  }
  if ($count_code_exists > 0) {
    drupal_set_message(t('%count codes have not been saved because they already existed.', array('%count' => $count_code_exists)), 'warning');
  }
  if ($count_error_validation > 0) {
    drupal_set_message(t('There have been %count validation errors.', array('%count' => $count_error_validation)), 'error');
  }
  if ($count_error > 0) {
    drupal_set_message(t('%count codes have not been saved because of an error.', array('%count' => $count_error)), 'error');
  }

}


/**
 * Count unused codes.
 */
function metis_count_unused() {

  $results = db_select('metis', 'm')
  ->fields('m')
  ->condition('used', 0)
  ->countQuery()
  ->execute()
  ->fetchField();

  return $results;

}


/**
 * Get unused code.
 */
function metis_get_unused() {

  // Check if unused codes exist in db.
  $results = db_select('metis', 'm')
  ->fields('m', array('code_public', 'code_private', 'server'))
  ->condition('used', 0)
  ->countQuery()
  ->execute()
  ->fetchField();

  // If there are no unused codes, return FALSE.
  if ($results == 0) {

    return FALSE;

  }
  // If there are unused codes, return an array
  // with public and private metis code.
  else {

    $results = db_select('metis', 'm')
    ->fields('m', array('code_public', 'code_private', 'server'))
    ->condition('used', 0)
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

    return array(
      'code_public' => $results['code_public'],
      'code_private' => $results['code_private'],
      'server' => $results['server'],
    );
  }
}


/**
 * Set code used.
 */
function metis_set_used($code_public, $nid) {

  // Check if code has 32 characters and nid is present.
  if (drupal_strlen($code_public) == 32 && is_numeric($nid)) {

    // Update database and set used codes as used.
    try {
      db_update('metis')
        ->fields(array(
          'used' => $nid,
        ))
        ->condition('code_public', $code_public)
        ->condition('used', 0)
        ->execute();
      // No exception thrown; PDO thinks the record was inserted correctly.
      watchdog('metis', 'Code %public_code has been set as "used" by node %nid.', array('%public_code' => $code_public, '%nid' => $nid));
    }
    catch (PDOException $e) {
      watchdog('metis', 'Code %public_code could not be set as "used" by node %nid. Error message: :error_message', array('%public_code' => $code_public, '%nid' => $nid, ':error_message' => $e->getMessage()), WATCHDOG_ERROR);
    }

    return TRUE;

  }
  else {

    return FALSE;

  }

}


/**
 * Implements hook_views_api().
 */
function metis_views_api() {
  return array(
    'api' => 3,
  );
}


/**
 * Define a field
 */

/**
 * Implements hook_field_info().
 */
function metis_field_info() {
  return array(
    'metis' => array(
      'label' => t('Metis'),
      'description' => t('VG Wort metis code'),
      'default_widget' => 'code_widget',
      'default_formatter' => 'metis_default',
      ),
  );

}


/**
 * Implements hook_field_access().
 */
function metis_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['type'] == 'metis' && $op == 'edit') {
    return user_access('add metis codes to nodes', $account);
  }
  return TRUE;
}


/**
 * Implements hook_field_presave().
 */
function metis_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Stop if no items where saved.
  if (isset($items[0]['show'])) {
    // Get an unused code.
    $unused = metis_get_unused();
    // Check if a public metis code is set already.
    // If not and the "show" option is selected, add a new one.
    if ($unused && empty($items[0]['code_public']) && $items[0]['show'] == 1) {
      if (is_array($unused)) {
        $items[0]['code_public'] = $unused['code_public'];
        $items[0]['code_private'] = $unused['code_private'];
        $items[0]['server'] = $unused['server'];
      }
    }
  }
}


/**
 * Implements hook_field_insert().
 */
function metis_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Set code as used after node is saved.
  foreach ($items as $delta => $value) {
    if ($items[$delta]['code_public']) {
      metis_set_used($items[$delta]['code_public'], $entity->nid);
    }
  }
}

/**
 * Implements hook_field_update().
 */
function metis_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Set code as used after node is saved.
  foreach ($items as $delta => $value) {
    if ($items[$delta]['code_public']) {
      metis_set_used($items[$delta]['code_public'], $entity->nid);
    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function metis_field_is_empty($item, $field) {
  if (empty($item['code_public']) && (string) $item['code_public'] !== '0' && $item['show'] != 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Define a widget
 */

/**
 * Implements hook_field_widget_info().
 */
function metis_field_widget_info() {
  return array(
    'code_widget' => array(
      'label' => t('Metis widget'),
      'field types' => array('metis'),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 */
function metis_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implements hook_element_info().
 */
function metis_element_info() {
  $elements = array(
    'code_widget' => array(
      '#input' => TRUE,
      '#process' => array('metis_code_widget_process'),
    ),
  );
  return $elements;
}


/**
 * Implements hook_process().
 */
function metis_code_widget_process($element, &$form_state) {
  if (isset($form_state['build_info']['base_form_id'])) {
    if ($form_state['build_info']['base_form_id'] == 'node_form') {
      // Count characters of the body.
      $count = strlen(strip_tags($form_state['values']['body']['und'][0]['value']));

      // Set text color for description.
      $class = $count > 1800 ? 'ok' : 'error';

      // Set description.
      $description = '<p class="' . $class . '">' . t('Text had approximately %count characters on last save. VG Wort requires at least 1.800.', array('%count' => $count)) . '</p>';
    }
  }
  else {
    $description = '';
  }
  // TODO: Fieldset (http://stackoverflow.com/q/5705983)
  // $element['metis'] = array(
  //   '#title' => $element['#title'] . ' (VG Wort)',
  //   '#type' => 'fieldset',
  //   '#collapsible' => TRUE,
  //   '#collapsed' => FALSE,
  // );

  $element['code_public'] = array(
    '#title' => t('Public metis code'),
    '#type' => 'hidden',
    '#default_value' => isset($element['#value']['code_public']) ? $element['#value']['code_public'] : '',
    '#weight' => 0,
  );

  $element['code_private'] = array(
    '#title' => t('Private metis code'),
    '#type' => 'hidden',
    '#default_value' => isset($element['#value']['code_private']) ? $element['#value']['code_private'] : '',
    '#weight' => 1,
  );

  $element['server'] = array(
    '#title' => t('Metis server'),
    '#type' => 'hidden',
    '#default_value' => isset($element['#value']['server']) ? $element['#value']['server'] : '',
    '#weight' => 2,
  );

  $element['show'] = array(
    '#title' => t('Include public metis code in article (enable count)'),
    '#type' => 'checkbox',
    '#default_value' => isset($element['#value']['show']) ? $element['#value']['show'] : '',
    '#weight' => 3,
    '#description' => $description,
  );

  // Add saved values to description.
  if (isset($element['#value']['code_public']) && isset($element['#value']['code_private'])) {
    $element['show']['#description'] .=
      '<p>' .
        t('Public metis code: %code', array('%code' => $element['#value']['code_public'])) . '<br /> ' .
        t('Private metis code: %code', array('%code' => $element['#value']['code_private'])) . '<br /> ' .
        t('Metis Server: %server', array('%server' => $element['#value']['server'])) .
      '</p>';
  }

  // Disable select field if there are no unused codes left.
  if (!isset($element['#value']['code_public']) && !isset($element['#value']['show']) && metis_count_unused() == 0) {
    $element['show']['#disabled'] = 'disabled';
    $element['show']['#description'] .= '<p class="error">' . t('There are no unused codes left! Field has been disabled, please add new codes.') . '</p>';
  }
  return $element;
}

/**
 * Define formatters.
 */
function metis_field_formatter_info() {
  return array(
    'metis_default' => array(
      'label' => t('Metis pixel as <img>'),
      'field types' => array('metis'),
    ),
    'metis_codes' => array(
      'label' => t('Metis codes'),
      'field types' => array('metis'),
    ),
    'metis_code_public' => array(
      'label' => t('Public metis code'),
      'field types' => array('metis'),
    ),
    'metis_code_private' => array(
      'label' => t('Private metis code'),
      'field types' => array('metis'),
    ),
    'metis_show' => array(
      'label' => t('Show metis pixel (yes/no)'),
      'field types' => array('metis'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function metis_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => $display['type'],
      '#code_public' => $item['code_public'],
      '#code_private' => $item['code_private'],
      '#show' => $item['show'],
      '#server' => $item['server'],
    );
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function metis_theme() {
  $theme = array(
    'metis_default' => array(
      'render element' => 'element',
    ),
    'metis_codes' => array(
      'render element' => 'element',
    ),
    'metis_code_public' => array(
      'render element' => 'element',
    ),
    'metis_code_private' => array(
      'render element' => 'element',
    ),
    'metis_show' => array(
      'render element' => 'element',
    ),
  );
  return $theme;
}


/**
 * Implements hook_field_attach_view_alter().
 */
function metis_field_attach_view_alter(&$output, $context) {
  // Hide field label for default formatter.
  foreach ($output as $field_name => $field) {
    if (!empty($field['#label_display'])) {
      if(isset($field['#formatter']) && $field['#formatter'] == 'metis_default') {
        $output[$field_name]['#label_display'] = 'hidden';
      }
    }
  }
}


/**
 * Theme function for default field formatter.
 *
 * $variables['element']['#code_public']: The public metis code,
 * $variables['element']['#code_private']: The private metis code,
 * $variables['element']['#server']: The metis server,
 * $variables['element']['#show']: The field setting to show (1) or not (0) the code,
 */
function theme_metis_default($variables) {
  $element = $variables['element'];
  if (empty($element)) {
    return '';
  }
  // Only include the image if (a) field is set to show, (b) a public
  // code exists, (c) a server exists, (d) on node pages (node/*).
  if ($element['#show'] == 1 && !empty($element['#code_public']) && !empty($element['#server']) && arg(0) == 'node' && is_numeric(arg(1))) {
    // Use SSL server if option to use SSL is set.
    if (variable_get('metis_force_ssl') == 1) {
      $server = 'https://ssl-vg03.met.vgwort.de';
    }
    else {
      $server = 'http://' . $element['#server'];
    }
    $img = array(
      'path' => $server . '/na/' . $element['#code_public'],
      'width' => 1,
      'height' => 1,
      'alt' => '',
      'title' => '',
      'attributes' => array(
        'class' => 'metis_code_img',
      ),
    );
    return theme_image($img);
  }
}


/**
 * Theme function for field formatter that shows the codes.
 *
 * $variables['element']['#code_public']: The public metis code,
 * $variables['element']['#code_private']: The private metis code,
 * $variables['element']['#server']: The metis server,
 * $variables['element']['#show']: The field setting to show (1) or not (0) the code,
 */
function theme_metis_codes($variables) {
  $element = $variables['element'];
  if (empty($element)) {
    return '';
  }
  return '<p>
            <strong>' . t('Public metis code') . ':</strong> ' . $element['#code_public'] . '<br />
            <strong>' . t('Private metis code') . ':</strong> ' . $element['#code_private'] .
         '</p>';
}


/**
 * Theme function for field formatter that shows the public metis code.
 *
 * $variables['element']['#code_public']: The public metis code,
 * $variables['element']['#code_private']: The private metis code,
 * $variables['element']['#server']: The metis server,
 * $variables['element']['#show']: The field setting to show (1) or not (0) the code,
 */
function theme_metis_code_public($variables) {
  $element = $variables['element'];
  if (empty($element)) {
    return '';
  }
  return $element['#code_public'];
}


/**
 * Theme function for field formatter that shows the private metis code.
 *
 * $variables['element']['#code_public']: The public metis code,
 * $variables['element']['#code_private']: The private metis code,
 * $variables['element']['#server']: The metis server,
 * $variables['element']['#show']: The field setting to show (1) or not (0) the code,
 */
function theme_metis_code_private($variables) {
  $element = $variables['element'];
  if (empty($element)) {
    return '';
  }
  return $element['#code_private'];
}


/**
 * Theme function for field formatter show.
 *
 * Shows wether the code is set to be shown.
 *
 * $variables['element']['#code_public']: The public metis code,
 * $variables['element']['#code_private']: The private metis code,
 * $variables['element']['#server']: The metis server,
 * $variables['element']['#show']: The field setting to show (1) or not (0) the code,
 */
function theme_metis_show($variables) {
  $element = $variables['element'];
  if (empty($element)) {
    return '';
  }
  switch ($element['#show']) {
    case '0':
      return t('no');
      break;
    case '1':
      return t('yes');
      break;
  }
}