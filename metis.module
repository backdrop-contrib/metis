<?php

/**
 * @file
 * The metis module
 *
 * Allows you to add the VG Wort mtis pixel to nodes
 */

/**
 * Implements hook_perm().
 */
function metis_perm() {

  return array(
    'administer metis module',
    'add metis codes to nodes',
    'add new metis codes',
  );

}


/**
 * Implements hook_menu().
 */
function metis_menu() {

  $items = array();

  $items['admin/settings/metis'] = array(
    'title' => 'Metis',
    'description' => 'Metis settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_settings_form'),
    'access arguments' => array('administer metis module'),
  );

  // Set default for tabs.
  $items['admin/settings/metis/settings'] = array(
    'title' => 'Metis settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/metis/add'] = array(
    'title' => 'Add metis codes',
    'description' => 'Add metis codes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_codes_form'),
    'access arguments' => array('add new metis codes'),
    'type' => MENU_LOCAL_TASK,
  );

  if (module_exists('views')) {

    // Get metis field name(s).
    $fields = content_fields();
    $metis_fields = array();

    // Select metis fields.
    foreach ($fields as $field) {
      if ($field['type'] == 'metis') {
        $metis_fields[$field['field_name']]['field_name'] = $field['field_name'];
        $metis_fields[$field['field_name']]['field_label'] = $field['widget']['label'];
      }
    }

    // Create a menu entry for every metis field.
    foreach ($metis_fields as $field) {
      $items['admin/settings/metis/list_' . $field['field_name']] = array(
        'title' => 'List codes (field: ' . $field['field_label'] . ')',
        'description' => 'List used metis codes for field ' . $field['field_label'],
        'page callback' => 'views_page',
        'page arguments' => array('metis_' . $field['field_name']),
        'access arguments' => array('administer metis module'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}


/**
 * Implements hook_help().
 */
function metis_help($path, $arg) {

  switch ($path) {

    // Main module help.
    case 'admin/settings/metis':
      return '<p>' . t('The Metis module allows you to automatically insert the metis pixel provided by <a href="http://www.vgwort.de/">VG Wort</a>. To use the module you need to add a CCK Metis field to your content types.') . '</p>';

    case 'admin/help#metis':
      // Return a line-break version of the module README.txt.
      return filter_filter('process', 1, NULL, file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}


/**
 * Define the settings form.
 */
function metis_settings_form() {

  // Define a textfield for the server setting.
  $form['metis_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Metis server'),
    '#default_value' => variable_get('metis_server', 'example.com'),
    // TODO: Add check or select list.
    '#description' => t('Change the server to be used'),
    '#required' => TRUE,
    '#weight' => -2,
  );

  $form['status'] = array(
    '#type' => 'markup',
    '#value' => '<p>' . t('<strong>Status:</strong> There are currently %count_codes unused codes left.', array('%count_codes' => metis_count_unused())) . '</p>',
    '#weight' => -3,
  );

  return system_settings_form($form);

}


/**
 * Define the form for entering a code.
 */
function metis_codes_form() {

  // Define a textarea.
  $form['code'] = array(
    '#type' => 'textarea',
    '#title' => t('Metis code'),
    '#description' => t('Please enter Metis codes you want to save in the format [public_code];[private_code]. <strong>One per line. Every code and every ident must be 32 letters long.</strong>'),
    '#cols' => 32,
    '#rows' => 20,
    '#required' => TRUE,
  );

  // Define a submit function.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;

}


/**
 * Validate the input.
 */
function metis_codes_form_validate($form, &$form_state) {

  // Get rid of white spaces.
  $input = trim($form_state['values']['code']);

  // Split by line.
  $rows = explode("\n", $input);

  // Remove any extra \r characters left behind.
  $rows = array_filter($rows, 'trim');

  $codes = array();

  foreach ($rows as $row) {

    $ignore = FALSE;

    $pattern = array(
      'Öffentlicher',
      'Identifikationscode',
      'Privater',
      'VG Wort',
    );

    foreach ($pattern as $needle) {
      if (stripos($row, $needle)) {
        $ignore = TRUE;
      }
    }

    if (!$ignore) {

      $items = explode(';', $row);
      $code_public = $items[0];
      $code_private = $items[1];

      if (drupal_strlen(trim($code_public)) != 32) {
        form_set_error('metis_codes', t('Public code %c is not 32 letters long', array('%c' => $code_public)));
      }

      if (drupal_strlen(trim($code_private)) != 32) {
        form_set_error('metis_codes', t('Private code %c is not 32 letters long', array('%c' => $code_private)));
      }

      // Check if code is already in db.
      $query = "SELECT code_public
                FROM {metis}
                WHERE code_public = '%s'";

      $row = db_query($query, $code_public);

      // If code is already in db, throw an error.
      if ($row->num_rows > 0) {
        form_set_error('metis_codes', t("Public code %c is already in database.", array('%c' => $code_public)));
      }

    }

  }

}


/**
 * Handle submission of metis codes.
 */
function metis_codes_form_submit($form, $form_state) {

  // Define variables.
  $count_ignores = 0;
  $count_saves = 0;

  // Get rid of white spaces.
  $input = trim($form_state['values']['code']);

  // Split by line.
  $rows = explode("\n", $input);

  // Remove any extra \r characters left behind.
  $rows = array_filter($rows, 'trim');

  $codes = array();

  // Write codes to database.
  foreach ($rows as $row) {

    $ignore = FALSE;

    // Ignore some rows.
    $pattern = array(
      'Öffentlicher',
      'Identifikationscode',
      'Privater',
      'VG Wort',
    );

    foreach ($pattern as $needle) {
      if (stripos($row, $needle)) {
        $ignore = TRUE;

        // Count ignored rows.
        $count_ignores++;
      }
    }

    if (!$ignore) {

      $items = explode(';', $row);
      $code_public = $items[0];
      $code_private = $items[1];

      // Write to database.
      db_query("INSERT INTO {metis} (code_public, code_private) VALUES ('%s', '%s')", str_replace("\r", '', $code_public), str_replace("\r", '', $code_private));

      // Count saved codes.
      $count_saves++;

    }

  }

  // Set confirmation message.
  drupal_set_message(t('%count_ignores lines have been ignored.', array('%count_ignores' => $count_ignores)));

  drupal_set_message(t('%count_saves codes have been saved.', array('%count_saves' => $count_saves)));

}


/**
 * Count unused codes.
 */
function metis_count_unused() {

  // Select an unused code from db.
  $query = "SELECT code_public
            FROM {metis}
            WHERE used = 0";

  return db_affected_rows(db_query($query));

}


/**
 * Get unused code.
 */
function metis_get_unused() {

  // Select an unused code from db.
  $query = "SELECT code_public, code_private
            FROM {metis}
            WHERE used = 0";

  $row = db_query($query);

  // If there are no unused codes, return FALSE.
  if (db_affected_rows($row) == 0) {

    return FALSE;

  }
  // If there are unused codes, return an array
  // with public and private code.
  else {
    $data = db_fetch_object($row);
    return array(
      'code_public' => $data->code_public,
      'code_private' => $data->code_private,
    );
  }
}


/**
 * Set code used.
 */
function metis_set_used($code_public, $nid) {

  // Check if code has 32 characters and nid is present.
  if (drupal_strlen($code_public) == 32 && is_numeric($nid)) {

    // Check if code is already set as used.
    $query = "SELECT used
              FROM {metis}
              WHERE code_public = '%s'
              AND used > 0";

    $row = db_query($query, $code_public);

    // If code is not set as used, set it.
    if (db_affected_rows($row) == 0) {

      // Update database and set used codes as used.
      $query = "UPDATE {metis}
                SET used = '%s'
                WHERE code_public = '%s'
                AND used = 0";

      db_query($query, $nid, $code_public);

      // Set watchdog message if db has been updated.
      if (db_affected_rows() > 0) {
        watchdog('metis', 'Code %public_code has been set as "used" by node %nid.', array('%public_code' => $code_public, '%nid' => $nid));
      }

      return TRUE;

    }

    return FALSE;

  }
  else {

    return FALSE;

  }

}

/**
 * Implements hook_views_api().
 */
function metis_views_api() {
  return array(
    'api' => 2.0,
  );
}


/**
 * Define a CCK field
 */

/**
 * Implements hook_field_info().
 */
function metis_field_info() {
  return array(
    'metis' => array(
      'label' => t('Metis'),
      'description' => t('VG Wort metis code'),
    ),
  );
}


/**
 * Implements hook_field_access().
 */
function metis_field_access($op, $field, $account = NULL, $node = NULL) {

  switch ($op) {

    case 'edit':
      return user_access('add metis codes to nodes', $account);
      break;

  }

  return TRUE;

}


/**
 * Implements hook_field_settings().
 */
function metis_field_settings($op, $field) {
  switch ($op) {

    // Define the database storage for the field.
    case 'database columns':
      $columns['code_public'] = array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      $columns['code_private'] = array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      $columns['show'] = array(
        'type' => 'int',
        'length' => 1,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );

      return $columns;

    case 'views data':
      // Prepare field for views.
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] . '_value'];

      return $data;
  }
}


/**
 * Implements hook_field().
 */
function metis_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {

    case 'presave':
      // Get an unused code.
      $unused = metis_get_unused();

      // Check if a public code is set already.
      // If not and the "show" option is selected, add a new one.
      if ($unused && empty($items[0]['code_public']) && $items[0]['show'] == 1) {

        if (is_array($unused)) {
          $items[0]['code_public'] = $unused['code_public'];
          $items[0]['code_private'] = $unused['code_private'];
        }

      }

      break;

    case 'insert':
      // Set code as used after node is saved.
      if ($items[0]['code_public']) {
        metis_set_used($items[0]['code_public'], $node->nid);
      }
      break;
  }
}

/**
 * Implements hook_content_is_empty().
 */
function metis_content_is_empty($item, $field) {

  if (empty($item['code_public'])) {
    return TRUE;
  }

  return FALSE;

}

/**
 * Define a widget
 */

/**
 * Implements hook_widget_info().
 */
function metis_widget_info() {

  return array(

    // The machine name of the widget, no more than 32 characters.
    'code_widget' => array(

      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Metis widget'),

      // An array of the field types this widget can be used with.
      'field types' => array('metis'),

      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      'multiple values' => CONTENT_HANDLE_CORE,

      'callbacks' => array(

        // Who will create the default value, default is core.
        'default value' => CONTENT_CALLBACK_DEFAULT,

      ),
    ),
  );
}


/**
 * Implements hook_elements().
 */
function metis_elements() {

  $elements = array(
    'code_widget' => array(
      '#input' => TRUE,
      '#process' => array('metis_code_widget_process'),
    ),
  );

  return $elements;
}


/**
 * Implements hook_process().
 */
function metis_code_widget_process($element, $edit, &$form_state, $form) {

  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  $element['code_public'] = array(
    '#title' => t('Public code'),
    '#type' => 'hidden',
    '#default_value' => $defaults['code_public'],
    '#weight' => 0,
  );

  $element['code_private'] = array(
    '#title' => t('Private code'),
    '#type' => 'hidden',
    '#default_value' => $defaults['code_private'],
    '#weight' => 1,
  );

  $element['show'] = array(
    '#title' => t('Include public code in article (enable count)'),
    '#type' => 'checkbox',
    '#default_value' => $defaults['show'],
    '#weight' => 1,
  );

  // Disable select field if there are no unused codes left.
  if (!$defaults['code_public'] && !$defaults['show'] && metis_count_unused() == 0) {

    $element['show']['#disabled'] = 'disabled';
    $element['show']['#description'] = '<span style="color:red">' . t('There are no unused codes left! Field has been disabled, please add new codes.') . '</span>';

  }
  elseif ($defaults['code_public'] && $defaults['code_private']) {

    $element['show']['#description'] = t('Public code: %code_public.<br /> Private code: %code_private.', array('%code_public' => $defaults['code_public'], '%code_private' => $defaults['code_private']));

  }

  return $element;
}


/**
 * Implements hook_widget().
 */
function metis_widget(&$form, &$form_state, $field, $items, $delta = 0) {

  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    // Needs to be added to display title with single value.
    // http://poplarware.com/articles/cck_field_module#comment-3344.
    '#field' => $field,

  );

  return $element;

}


/**
 * Implements hook_theme().
 */
function theme_code_widget($element) {

  $output = $element['#children'];

  // Needs to be added to display title with single value.
  // http://poplarware.com/articles/cck_field_module#comment-3344.
  if (empty($element['#field']['multiple'])) {

    $output = '<label for="edit-field-metis-0-code-public-wrapper">' . $element['#field']['widget']['label'] . '</label>' . $output;
    $output .= $element['#field']['widget']['description'];

  }

  return $output;

}


/**
 * Define formatters.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 */
function metis_field_formatter_info() {

  return array(

    // The machine name of the formatter.
    'default' => array(

      // The human-readable label shown on the Display.
      // fields screen.
      'label' => t('Metis pixel as <img>'),

      // An array of the field types this formatter
      // can be used on.
      'field types' => array('metis'),

      'multiple values' => CONTENT_HANDLE_CORE,
    ),

    'codes' => array(
      'label' => t('Metis codes'),
      'field types' => array('metis'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),

    'code_public' => array(
      'label' => t('Public metis code'),
      'field types' => array('metis'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),

    'code_private' => array(
      'label' => t('Private metis code'),
      'field types' => array('metis'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),

    'show' => array(
      'label' => t('Show metis pixel (yes/no)'),
      'field types' => array('metis'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}


/**
 * Implements hook_theme().
 */
function metis_theme() {
  return array(
    // Themes for the formatters.
    'code_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'metis_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'metis_formatter_codes' => array(
      'arguments' => array('element' => NULL),
    ),
    'metis_formatter_code_public' => array(
      'arguments' => array('element' => NULL),
    ),
    'metis_formatter_code_private' => array(
      'arguments' => array('element' => NULL),
    ),
    'metis_formatter_show' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}


/**
 * Theme function for default field formatter.
 *
 * $element['#item']: the sanitized $delta value for the item,
 * $element['#field_name']: the field name,
 * $element['#type_name']: the $node->type,
 * $element['#formatter']: the $formatter_name,
 * $element'#node']: the $node,
 * $element['#delta']: the delta of this item, like '0',
 */
function theme_metis_formatter_default($element = NULL) {

  if (empty($element['#item'])) {
    return '';
  }

  // Get server.
  $server = variable_get('metis_server', NULL);

  if ($server && $element['#item']['show'] && !empty($element['#item']['code_public'])) {

    return '<img class="metis_code_img" src="http://' . $server . '/na/' . $element['#item']['code_public'] . '" height="1" width="1" alt="" />';

    // TODO: Hide in teaser.
    // TODO: Hide label.
  }

}


/**
 * Theme function for field formatter that shows the codes.
 */
function theme_metis_formatter_codes($element = NULL) {

  if (empty($element['#item'])) {
    return '';
  }

  return '<p><strong>Public code:</strong> ' . $element['#item']['code_public'] . '<br /><strong>Private code:</strong> ' . $element['#item']['code_private'] . '</p>';

}


/**
 * Theme function for field formatter that shows the public code.
 */
function theme_metis_formatter_code_public($element = NULL) {

  if (empty($element['#item'])) {
    return '';
  }

  return $element['#item']['code_public'];

}


/**
 * Theme function for field formatter that shows the private code.
 */
function theme_metis_formatter_code_private($element = NULL) {

  if (empty($element['#item'])) {
    return '';
  }

  return $element['#item']['code_private'];

}


/**
 * Theme function for field formatter show.
 *
 * Shows wether the code is set to be shown.
 */
function theme_metis_formatter_show($element = NULL) {

  if (empty($element['#item'])) {
    return '';
  }

  switch ($element['#item']['show']) {

    case '0':
      return t('no');
      break;

    case '1':
      return t('yes');
      break;

  }

}
