<?php
// $Id: metis.module,v 1.0 2010/11/13 14:49:21 yan Exp $

/**
 * @file
 * The metis module
 *
 * Allows you to add the VG Wort mtis pixel to nodes
 */


/**
  * Define menu entries
  */

function metis_menu() {

  $items = array();

  $items['admin/settings/metis'] = array(
    'title' => t('Metis'),
    'description' => t('Metis settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/metis/add'] = array(
    'title' => t('Add metis codes'),
    'description' => t('Add metis codes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metis_codes_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
  * Implementation of hook_help().
  */

function metis_help($path, $arg) {

  switch ($path) {

    // Main module help
    case 'admin/settings/metis':
      return '<p>' . t('The Metis module allows you to automatically insert the metis pixel provided by <a href="http://www.vgwort.de/">VG Wort</a>.') . '</p><p>' . t('To use the module you need to') . '</p><ol><li>' . t('Add a CCK select list field to your node types and then select it on this page') . '</li><li>' . t('Set the display settings of that field to "metis" for full node view') . '</li></ol>';

  }
}


/**
  * Define the settings form
  */

function metis_settings_form() {

  // Get CCK fields
  $fields = content_fields();

  // Add empty option
  $options = array(NULL => 'None');

  foreach ($fields as $field) {

    // Show only fields with select list
    if ($field['widget']['type'] == 'optionwidgets_select') {
      $options[$field['field_name']] = $field['widget']['label'] . ' (' . $field['field_name'] . ')';
    }

  }

  // Define a textarea
  $form['metis_cck_field'] = array(
    '#type' => 'select',
    '#required' => FALSE,
    '#title' => t('Select a field'),
    '#description' => t('Please select an existing CCK field (must be select list)'),
    '#default_value' => variable_get('metis_cck_field', array()),
    '#options'  => $options,
  );

  // Define a textfield for the server setting
  $form['metis_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Metis server'),
    '#default_value' => variable_get('metis_server', 'vg01.met.vgwort.de'),
    '#description' => t('Change the server to be used)'),
    '#required' => TRUE,
  );

  return system_settings_form($form);

}


/**
  * Define the form for entering a code
  */

function metis_codes_form() {

  // Define a textarea
  $form['code'] = array(
    '#type' => 'textarea',
    '#title' => t('Metis code'),
    '#description' => t('Please enter Metis codes you want to save in the format [code];[ident]. <strong>One per line. Every code and every ident must be 32 letters long.</strong>'),
    '#cols' => 32,
    '#rows' => 20,
    '#required' => TRUE,
  );

  // Define a submit function.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;

}


/**
  * Validate the input
  */

function metis_codes_form_validate($form, &$form_state) {

  // Get rid of white spaces
  $input = trim($form_state['values']['code']);

  // Split by line
  $rows = explode("\n", $input);

  // remove any extra \r characters left behind
  $rows = array_filter($rows, 'trim');

  $codes = array();

  foreach ($rows as $row) {

    $items = explode(';', $row);
    $code = $items[0];
    $ident = $items[1];

    if (drupal_strlen(trim($code)) != 32) form_set_error('metis_codes', t("%c is not 32 letters long", array('%c' => $code)));
    if (drupal_strlen(trim($ident)) != 32) form_set_error('metis_codes', t("%c is not 32 letters long", array('%c' => $ident)));

  }

}


/**
  * Handle submission of the metis codes and saving
  * of the data to the database.
  */

function metis_codes_form_submit($form, $form_state) {

  // Get rid of white spaces
  $input = trim($form_state['values']['code']);

  // Split by line
  $rows = explode("\n", $input);

  // remove any extra \r characters left behind
  $rows = array_filter($rows, 'trim');

  $codes = array();

  // Implode values for the confirmation message
  //$codes_print = implode('<br />', $codes);

  // Write codes to database
  foreach ($rows as $row) {

    $items = explode(';', $row);
    $code = $items[0];
    $ident = $items[1];

    // CHECK NEEDS TO BE ADDED TO MAKE SURE THAT CODE DOESN'T EXIST ALREADY

    // Write to database
    db_query("INSERT INTO {metis} (code, ident) VALUES ('%s', '%s')", str_replace("\r", '', $code), str_replace("\r", '', $ident));

    // Set confirmation message
    drupal_set_message('Saved code ' . $code . ' with ident ' . $ident);
  }

}


/**
  * Implementation of hook_form_alter().
  * To disable the select list once a code has been selected
  * From http://drupal.org/node/357328
  */

function metis_form_alter(&$form, $form_state, $form_id) {

  // Get field
  $field = variable_get('metis_cck_field', NULL);

  if ($field) {

    if (isset($form['#node']->{$field}[0]['value']) && isset($form['type']) && isset($form['#node'])) {

      // Use this check to match node edit form for any content type.
      if ($form['type']['#value'] .'_node_form' == $form_id) {
        $form['#after_build'][] = '_metis_after_build';
      }

      // Use this check to match node edit form for a particular content type.
      // if ('mytype_node_form' == $form_id) {
      //   $form['#after_build'][] = '_metis_after_build';
      // }

    }
  }

  // Inject PHP allowed values into field
  // module_load_include('inc', 'metis', 'cck_inject_allowed');
  // require_once ./metis_cck_inject_allowed.inc;
  $form['#field_info'][$field]['allowed_values_php'] = '
    $field = variable_get(\'metis_cck_field\', NULL); // The machine readable name of the field
    $options = array();

    // Check if node already has a code set in this field on node edit
    if (arg(0) == \'node\' && is_numeric(arg(1)) && arg(2) == \'edit\'){

      $node = node_load(' . $form['nid']['#value'] . ');

      if ($node->{$field}[0][\'value\']) {

        // If code is set, use it and exit
        $options[$node->{$field}[0][\'value\']] = t(\'Embed Metis code\') . \' (\' . $node->{$field}[0][\'value\'] . \')\';

        return $options;

      }

    }

    if (!$node->{$field}[0][\'value\']) {

      $db_field = content_fields($field);
      $db_info = content_database_info($db_field);

      if ($db_info[\'columns\'][\'value\'][\'column\']) {

        $query = "SELECT metis.code
                  FROM metis
                  LEFT JOIN %s ON ( %s.%s = metis.code )
                  WHERE metis.used = 0
                  AND %s.%s IS NULL
                  LIMIT 1";


        $row = db_fetch_object(db_query($query, $db_info[\'table\'], $db_info[\'table\'], $db_info[\'columns\'][\'value\'][\'column\'], $db_info[\'table\'], $db_info[\'columns\'][\'value\'][\'column\']));
        $options[$row->code] = t(\'Embed Metis code\') . \' (\' . $row->code . \')\';

      }
    }

    return $options;
  ';

}


/**
  * Custom after_build callback handler.
  * To disable the select list once a code has been selected
  */

function _metis_after_build($form, &$form_state) {

  $field = variable_get('metis_cck_field', NULL);

  if ($field) {

    // Use this one if the field is placed on top of the form.
    _metis_fix_disabled($form[$field]);

    // Use this one if the field is placed inside a fieldgroup.
    // _metis_fix_disabled($form['group_mygroup'][$form[$field]]);

  }

  return $form;

}


/**
  * Recursively set the disabled attribute of a CCK field
  * and all its dependent FAPI elements.
  */

function _metis_fix_disabled(&$elements) {

  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      _metis_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}


/**
  * Implementation of hook_field_formatter_info().
  *
  * Here we define an array with the options we will provide in display fields page
  * The array keys will be used later in hook_theme and theme_
  */

function metis_field_formatter_info() {

  $formatters = array(
    'metis' => array(
      'label' => t('Include as a metis pixel'),
      'field types' => array('text'),
      'description' => t('Embeds the fields value as metis code.'),
    ),
  );

  return $formatters;

}


/**
  * Implementation of hook_theme().
  *
  * We declare our theme functions according to the array keys in  hook_field_formatter_info
  */

function metis_theme() {

  $theme = array(
    'metis_formatter_metis' => array(
      'arguments' => array('element' => NULL),
    ),
  );

  return $theme;

}


/**
  * Theming functions for our formatters
  *
  * And here we do our magic. You can use dsm($element) to see what you have to play with (requires devel module).
  */

function theme_metis_formatter_metis($element) {

  $server = variable_get('metis_server', 'vg01.met.vgwort.de');
  $output = '<img src="/' . $server . '/na/' . $element['#item']['value'] . '" width="1" height="1" alt="">';

  return $output;

}

// Cron hook
function metis_cron() {

  metis_set_used();

}

function metis_set_used() {

  // The machine readable name of the field
  $field = variable_get('metis_cck_field', NULL);

  if ($field) {

    // CCK database information
    $db_field = content_fields($field);
    $db_info = content_database_info($db_field);

    // Select used codes
    $query = "SELECT metis.code
              FROM metis
              INNER JOIN %s
              ON metis.code=%s.%s";

    $result = db_query($query, $db_info['table'], $db_info['table'], $db_info['columns']['value']['column']);

    while($row = db_fetch_object($result)) {

      // Update database and set used codes as "used"
      $query="UPDATE metis
              SET used=1
              WHERE code='%s'
              AND used=0";

      db_query($query, $row->code);

      // Set watchdog message if db has been updated
      if (db_affected_rows() != 0) watchdog('metis', t('Code %code has been set as "used".'), array('%code' => $row->code));
    }
  }
}
